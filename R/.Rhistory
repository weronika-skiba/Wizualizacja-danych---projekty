uber <- read.csv('../datasets/uber.csv')
uber.head
head(uber, 5)
head(uber, 5)
hist(uber$fare_amount)
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
hist(uber$fare_amount)
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
max(uber$pickup_longitude)
min(uber$pickup_longitude)
min(uber$pickup_latitude)
max(uber$pickup_latitude)
# rows with impossible pickup coords cleaned
uber = uber[uber$pickup_longitude <= 180]
# rows with impossible pickup coords cleaned
uber = uber[uber$pickup_longitude <= 180,]
# rows with impossible pickup coords cleaned
uber = uber[uber$pickup_longitude <= 180, uber$pickup_longitude >= -180]
# rows with impossible pickup coords cleaned
uber = uber[uber$pickup_longitude <= 180, uber$pickup_longitude >= -180, ]
uber = uber[uber$pickup_longitude >= -180, ]
uber = uber[uber$pickup_latitude <= 90, ]
uber = uber[uber$pickup_latitude >= -90, ]
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
uber = uber[uber$pickup_longitude <= -40, ] # 180
uber = uber[uber$pickup_longitude >= -180, ]
uber = uber[uber$pickup_latitude <= 90, ]
uber = uber[uber$pickup_latitude >= 20, ] # -90
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
uber = uber[uber$pickup_longitude >= -80, ] # -180
uber = uber[uber$pickup_longitude <= -40, ] # 180
uber = uber[uber$pickup_longitude >= -80, ] # -180
uber = uber[uber$pickup_latitude <= 42, ] # 90
uber = uber[uber$pickup_latitude >= 37, ] # -90
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
uber = uber[uber$pickup_longitude <= -72, ] # 180
uber = uber[uber$pickup_longitude >= -76, ] # -180
uber = uber[uber$pickup_latitude <= 41.5, ] # 90
uber = uber[uber$pickup_latitude >= 40, ] # -90
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
# longitude = east-west   = x
# latitude  = south-north = y
# plot(uber$pickup_longitude, uber$pickup_latitude)
plot(uber$dropoff_longitude, uber$dropoff_latitude)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
min(uber$pickup_latitude)
max(uber$pickup_longitude)
min(uber$pickup_longitude)
head(uber$pickup_longitude, 5)
min(uber$pickup_latitude)
uber = na.omit(uber)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
uber = uber[uber$dropoff_latitude <= 41.5, ] # 90
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude, xlim <- c(-75.5, -72), ylim <- c(40, 41.5))
# longitude = east-west   = x
# latitude  = south-north = y
plot(uber$pickup_longitude, uber$pickup_latitude, xlim = c(-75.5, -72), ylim = c(40, 41.5))
plot(uber$dropoff_longitude, uber$dropoff_latitude, xlim = c(-75.5, -72), ylim = c(40, 41.5))
# Function that selects only values from a column within a specified range
select_values_within_range <- function(uber, column_name, lower_bound, upper_bound) {
# Select the column by name
column <- uber[[column_name]]
# Select values within range
selected_values <- column[column >= lower_bound & column <= upper_bound]
return(selected_values)
}
clear
View(uber)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
uber <- uber[uber$passenger_count <= 10, ]
for (col in 2:ncol(uber)) {
if(is.numeric(uber[1,col]) && ! is.na(min(uber[,col]))){
hist(uber[,col], breaks=10, main="Histogramy for column", ylab="Count", xlab=colnames(uber)[col], xlim=c(min(uber[,col]), max(uber[,col])) )
}
}
hist(uber$passenger_count)
hist(uber$fare_amount, col = 'skyblue3', breaks = 6)
hist(uber$fare_amount, col = 'skyblue3', breaks = 3)
uber <- uber[uber$fare_amount >= 0, ]
hist(uber$fare_amount, col = 'skyblue3', breaks = 3)
hist(uber$fare_amount, col = 'skyblue3', breaks = 5)
# borderline impossible passenger counts and fares cleaned
uber <- uber[uber$fare_amount <= 80, ]
hist(uber$fare_amount, col = 'skyblue3', breaks = 5)
hist(uber$fare_amount, col = 'skyblue3', breaks = 10)
hist(uber$fare_amount, col = 'skyblue3', breaks = 15)
hist(uber$fare_amount, col = 'skyblue3', breaks = 20)
hist(uber$fare_amount, col = 'skyblue3', breaks = 20)
hist(uber$fare_amount, col = 'skyblue3', breaks = 15)
hist(uber$fare_amount, col = 'skyblue3', breaks = 30)
hist(uber$passenger_count, , col = 'skyblue3', breaks = 6)
hist(selected_values, main="Histogram for range 0-50", xlab="Fare amount", ylab="Count")
hist(selected_values, main="Histogram for range 0-50", xlab="Fare amount", ylab="Count", col = 'skyblue3')
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
# borderline impossible passenger counts and fares cleaned
uber <- uber[uber$fare_amount <= 60, ]
hist(uber$fare_amount, col = 'skyblue3', breaks = 30)
hist(selected_values, main="Histogram for range 0-50", xlab="Fare amount", ylab="Count", col = 'skyblue3')
hist(uber$fare_amount, col = 'skyblue3', breaks = 30)
# hist(uber$fare_amount, col = 'skyblue3', breaks = 30)
hist(uber$passenger_count, , col = 'skyblue3', breaks = 6)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
source("C:/Users/mihawb/OneDrive/studia/sem VI 2023L/WIZ/Wizualizacja-danych---projekty/R/uber.R", echo=TRUE)
